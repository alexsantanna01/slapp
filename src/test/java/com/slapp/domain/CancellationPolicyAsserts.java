package com.slapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CancellationPolicyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCancellationPolicyAllPropertiesEquals(CancellationPolicy expected, CancellationPolicy actual) {
        assertCancellationPolicyAutoGeneratedPropertiesEquals(expected, actual);
        assertCancellationPolicyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCancellationPolicyAllUpdatablePropertiesEquals(CancellationPolicy expected, CancellationPolicy actual) {
        assertCancellationPolicyUpdatableFieldsEquals(expected, actual);
        assertCancellationPolicyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCancellationPolicyAutoGeneratedPropertiesEquals(CancellationPolicy expected, CancellationPolicy actual) {
        assertThat(actual)
            .as("Verify CancellationPolicy auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCancellationPolicyUpdatableFieldsEquals(CancellationPolicy expected, CancellationPolicy actual) {
        assertThat(actual)
            .as("Verify CancellationPolicy relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getHoursBeforeEvent()).as("check hoursBeforeEvent").isEqualTo(expected.getHoursBeforeEvent()))
            .satisfies(a -> assertThat(a.getRefundPercentage()).as("check refundPercentage").isEqualTo(expected.getRefundPercentage()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCancellationPolicyUpdatableRelationshipsEquals(CancellationPolicy expected, CancellationPolicy actual) {
        // empty method
    }
}
