package com.slapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EquipmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipmentAllPropertiesEquals(Equipment expected, Equipment actual) {
        assertEquipmentAutoGeneratedPropertiesEquals(expected, actual);
        assertEquipmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipmentAllUpdatablePropertiesEquals(Equipment expected, Equipment actual) {
        assertEquipmentUpdatableFieldsEquals(expected, actual);
        assertEquipmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipmentAutoGeneratedPropertiesEquals(Equipment expected, Equipment actual) {
        assertThat(actual)
            .as("Verify Equipment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipmentUpdatableFieldsEquals(Equipment expected, Equipment actual) {
        assertThat(actual)
            .as("Verify Equipment relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getBrand()).as("check brand").isEqualTo(expected.getBrand()))
            .satisfies(a -> assertThat(a.getModel()).as("check model").isEqualTo(expected.getModel()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getAvailable()).as("check available").isEqualTo(expected.getAvailable()))
            .satisfies(a -> assertThat(a.getEquipmentType()).as("check equipmentType").isEqualTo(expected.getEquipmentType()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipmentUpdatableRelationshipsEquals(Equipment expected, Equipment actual) {
        assertThat(actual)
            .as("Verify Equipment relationships")
            .satisfies(a -> assertThat(a.getRoom()).as("check room").isEqualTo(expected.getRoom()));
    }
}
