package com.slapp.domain;

import static com.slapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RoomAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomAllPropertiesEquals(Room expected, Room actual) {
        assertRoomAutoGeneratedPropertiesEquals(expected, actual);
        assertRoomAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomAllUpdatablePropertiesEquals(Room expected, Room actual) {
        assertRoomUpdatableFieldsEquals(expected, actual);
        assertRoomUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomAutoGeneratedPropertiesEquals(Room expected, Room actual) {
        assertThat(actual)
            .as("Verify Room auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomUpdatableFieldsEquals(Room expected, Room actual) {
        assertThat(actual)
            .as("Verify Room relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getHourlyRate())
                    .as("check hourlyRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getHourlyRate())
            )
            .satisfies(a -> assertThat(a.getCapacity()).as("check capacity").isEqualTo(expected.getCapacity()))
            .satisfies(a -> assertThat(a.getSoundproofed()).as("check soundproofed").isEqualTo(expected.getSoundproofed()))
            .satisfies(a -> assertThat(a.getAirConditioning()).as("check airConditioning").isEqualTo(expected.getAirConditioning()))
            .satisfies(a -> assertThat(a.getRoomType()).as("check roomType").isEqualTo(expected.getRoomType()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRoomUpdatableRelationshipsEquals(Room expected, Room actual) {
        assertThat(actual)
            .as("Verify Room relationships")
            .satisfies(a -> assertThat(a.getStudio()).as("check studio").isEqualTo(expected.getStudio()));
    }
}
