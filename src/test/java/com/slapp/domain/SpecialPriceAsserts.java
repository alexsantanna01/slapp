package com.slapp.domain;

import static com.slapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SpecialPriceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecialPriceAllPropertiesEquals(SpecialPrice expected, SpecialPrice actual) {
        assertSpecialPriceAutoGeneratedPropertiesEquals(expected, actual);
        assertSpecialPriceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecialPriceAllUpdatablePropertiesEquals(SpecialPrice expected, SpecialPrice actual) {
        assertSpecialPriceUpdatableFieldsEquals(expected, actual);
        assertSpecialPriceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecialPriceAutoGeneratedPropertiesEquals(SpecialPrice expected, SpecialPrice actual) {
        assertThat(actual)
            .as("Verify SpecialPrice auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecialPriceUpdatableFieldsEquals(SpecialPrice expected, SpecialPrice actual) {
        assertThat(actual)
            .as("Verify SpecialPrice relevant properties")
            .satisfies(a -> assertThat(a.getDayOfWeek()).as("check dayOfWeek").isEqualTo(expected.getDayOfWeek()))
            .satisfies(a -> assertThat(a.getStartTime()).as("check startTime").isEqualTo(expected.getStartTime()))
            .satisfies(a -> assertThat(a.getEndTime()).as("check endTime").isEqualTo(expected.getEndTime()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecialPriceUpdatableRelationshipsEquals(SpecialPrice expected, SpecialPrice actual) {
        assertThat(actual)
            .as("Verify SpecialPrice relationships")
            .satisfies(a -> assertThat(a.getRoom()).as("check room").isEqualTo(expected.getRoom()));
    }
}
