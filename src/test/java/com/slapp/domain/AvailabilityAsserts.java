package com.slapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AvailabilityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvailabilityAllPropertiesEquals(Availability expected, Availability actual) {
        assertAvailabilityAutoGeneratedPropertiesEquals(expected, actual);
        assertAvailabilityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvailabilityAllUpdatablePropertiesEquals(Availability expected, Availability actual) {
        assertAvailabilityUpdatableFieldsEquals(expected, actual);
        assertAvailabilityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvailabilityAutoGeneratedPropertiesEquals(Availability expected, Availability actual) {
        assertThat(actual)
            .as("Verify Availability auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvailabilityUpdatableFieldsEquals(Availability expected, Availability actual) {
        assertThat(actual)
            .as("Verify Availability relevant properties")
            .satisfies(a -> assertThat(a.getStartDateTime()).as("check startDateTime").isEqualTo(expected.getStartDateTime()))
            .satisfies(a -> assertThat(a.getEndDateTime()).as("check endDateTime").isEqualTo(expected.getEndDateTime()))
            .satisfies(a -> assertThat(a.getAvailable()).as("check available").isEqualTo(expected.getAvailable()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvailabilityUpdatableRelationshipsEquals(Availability expected, Availability actual) {
        assertThat(actual)
            .as("Verify Availability relationships")
            .satisfies(a -> assertThat(a.getRoom()).as("check room").isEqualTo(expected.getRoom()));
    }
}
